{"version":3,"sources":["Components/TodoInput.jsx","Components/TodoItem.jsx","Components/TodoList.jsx","Components/Todo.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","required","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","Todo","e","setState","target","preventDefault","newItem","state","updatedItems","uuid","filteredItems","filter","selectedItem","find","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e018ef30.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class TodoInput extends Component {\r\n  render() {\r\n    const { item, handleChange, handleSubmit, editItem } = this.props;\r\n    return (\r\n      <div className=\"card card-body bg-warning\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n              <div className=\"input-group-text text-white bg-danger\">\r\n                <i className=\"fas fa-book\"></i>\r\n              </div>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control text-center text-capitalize\"\r\n              placeholder=\"add a Todo Item\"\r\n              value={item}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            className={editItem ? \"btn btn-block bg-success text-capitalize mt-3\" : \"btn btn-block bg-dark text-capitalize mt-3 text-white\"}>\r\n            {editItem ? \"Edit & Submit\" : \"Add Item\"}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class TodoItem extends Component {\r\n  render() {\r\n    const { title, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between\">\r\n        <h5 className=\"text-capitalize\">{title}</h5>\r\n        <div className=\"todo-item-icons\">\r\n          <span className=\"mx-2 text-success\" onClick={handleEdit}>\r\n            <i className=\"fas fa-pen\"></i>\r\n          </span>\r\n          <span className=\"mx-2 text-danger\" onClick={handleDelete} >\r\n            <i className=\"fas fa-trash\"></i>\r\n          </span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nexport default class TodoList extends Component {\r\n  render() {\r\n    const { items, clearList, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <div>\r\n        <ul className=\"list-group mt-5\">\r\n          <h1 className=\"text-uppercase text-center\">todo list</h1>\r\n          {items.map(item => {\r\n            return (\r\n              <TodoItem\r\n                key={item.id}\r\n                title={item.title}\r\n                handleDelete={() => handleDelete(item.id)}\r\n                handleEdit={() => handleEdit(item.id)}\r\n              />\r\n            );\r\n          })}\r\n          <button\r\n            type=\"submit\"\r\n            onClick={clearList}\r\n            className=\"btn btn-block bg-danger mt-3 text-white\"\r\n          >\r\n            Clear List\r\n          </button>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport TodoInput from './TodoInput';\r\nimport TodoList from './TodoList';\r\nimport uuid from 'uuid';\r\n\r\nexport default class Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      items: [],\r\n      id: uuid(),\r\n      item: '',\r\n      editItem: false\r\n    };\r\n  }\r\n  handleChange = e => {\r\n    this.setState({\r\n      item: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const newItem = {\r\n      id: this.state.id,\r\n      title: this.state.item\r\n    };\r\n    const updatedItems = [...this.state.items, newItem];\r\n    this.setState({\r\n      items: updatedItems,\r\n      item: '',\r\n      id: uuid(),\r\n      editItem: false\r\n    });\r\n  };\r\n  clearList = () => {\r\n    this.setState({\r\n      items: []\r\n    });\r\n  };\r\n  handleDelete = id => {\r\n    const filteredItems = this.state.items.filter(item => item.id !== id);\r\n    this.setState({\r\n      items: filteredItems\r\n    });\r\n  };\r\n  handleEdit = id => {\r\n    const filteredItems = this.state.items.filter(item => item.id !== id);\r\n    const selectedItem = this.state.items.find(item => item.id === id);\r\n    this.setState({\r\n      items: filteredItems,\r\n      item: selectedItem.title,\r\n      editItem: true,\r\n      id: id\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"todo-container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-12 col-md-12 col-sm-12\">\r\n              <div className=\"todo\">\r\n                <h1 className=\"text-center text-uppercase\">Todo Input</h1>\r\n                <TodoInput\r\n                  item={this.state.item}\r\n                  handleChange={this.handleChange}\r\n                  handleSubmit={this.handleSubmit}\r\n                  editItem={this.state.editItem}\r\n                />\r\n                <TodoList\r\n                  items={this.state.items}\r\n                  clearList={this.clearList}\r\n                  handleDelete={this.handleDelete}\r\n                  handleEdit={this.handleEdit}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Todo from './Components/Todo';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}